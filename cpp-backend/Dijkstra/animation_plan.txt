types of ouput:
<pq>

<adj>


3 data structures:
- Pq
- Dist array
- presedence array


Init:
3 data structures to display:
- pq: init with "starting node, distance"
- dist arr: start with INF at all indexes
- presedence arr: start with -1 at all indexes

for ds:
3 line
for line 1:
-for every element in pq, add it to the "priority queue" container.

for line 2: DEBUG OUTPUT
- there should be no mismatch in this line and dist container values. Update if there are

for line 3: DEBUG OUTPUT
- there should be no mismatch in this line and pred container values. Update if there are


for adj:
for line 1:
- highlight node with value "current node" to some colour using a useState hook over the color var for each node component
Maybe one solution is to add a "current node" class to the css of the node in focus. Idk exact details yet.
- display the current distance next to the node

For lines after line 1:
- highlight "check node" using some colour and a state hook 
- display "check distance" to "check node"
- display some sort of comparision between "check distance" and the value of dist["check node"]
IF comparision result == 1:
- cross out the old value at dist["check node"] and update it with "check distance"
- cross out the old node at presedence["check node"] and change it to "current node" 

loop for as many lines until "</adj>"


for result: 
simply put the result values in the matching positions in UI
